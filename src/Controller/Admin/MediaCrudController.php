<?php

namespace App\Controller\Admin;

use App\Entity\Media;
use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class MediaCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Media::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud->setEntityLabelInSingular('Médias')
            ->setEntityLabelInPlural('Médias');
        return $crud;
    }

    public function configureFields(string $pageName): iterable
    {
        $mediasDir = $this->getParameter('medias_directory');
        $uploadsDir = $this->getParameter('uploads_directory');

        yield TextField::new('name', 'Nom')
            ->setRequired(true)
            ->setHelp('Le nom du fichier sans extension.');

        yield TextField::new('altText', 'Texte alternatif')
            ->setHelp('Le texte alternatif est utilisé pour les médias qui ne sont pas des images.');

        $imageField = ImageField::new('filename', 'Média')
            ->setBasePath($uploadsDir)
            ->setUploadDir($mediasDir)
            ->setUploadedFileNamePattern('[slug]-[uuid].[extension]')
            ->setHelp('Le média est une image.');

        if (Crud::PAGE_EDIT === $pageName) {
            $imageField->setRequired(false);
        }

        yield TextField::new('uploadedBy', 'Uploadé par')
            ->setHelp('L\'utilisateur qui a uploadé le média.')
            ->onlyOnIndex();

        yield $imageField;
    }

    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        if ($this->isGranted("ROLE_ADMIN")) {
            return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);
        } else {
            return parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters)
                ->andWhere('entity.uploaded_by = :user')
                ->setParameter('user', $this->getUser());
        }
    }

    public function configureActions(Actions $actions): Actions
    {
        if (in_array('ROLE_AUTHOR', $this->getUser()->getRoles())) {
            return $actions
                ->remove(Crud::PAGE_INDEX, Action::DELETE);
        }
        return parent::configureActions($actions); // TODO: Change the autogenerated stub
    }
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        /** @var User $user */
        $user = $this->getUser();
        /** @var Media $entityInstance */
        $entityInstance->setUploadedBy($user);
        $entityInstance->setName($user->getUsername() . '_' . $entityInstance->getName());
        parent::persistEntity($entityManager, $entityInstance);
    }
}
